from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging

TOKEN = "8069908154:AAHZUeNvEwxVaVLFa4zwn6TocRa7i0cySfo"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", callback_data="developers"),
        InlineKeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="docs"),
        InlineKeyboardButton("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞", callback_data="presentation")
    )
    return keyboard

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.callback_query_handler(lambda call: call.data == "developers")
async def send_developers(call: types.CallbackQuery):
    developers = "üë®‚Äçüíª –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏:\n1. –ê–π—Ç–±–∞–µ–≤ –ñ–µ“£—ñ—Å –ñ“±–º–∞–±–∞–π“±–ª—ã\n2. –°—É–Ω–¥–µ—Ç –°—É–º–∞—è –ë–∞–π–∂–∞–Ω“õ—ã–∑—ã"
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back"))
    await call.message.edit_text(developers, reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "docs")
async def send_docs_menu(call: types.CallbackQuery):
    doc_link = "https://github.com/nimble365/aisid2025_bot/blob/main/tech_doc.md"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", url=doc_link),
        InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", callback_data="download_docs"),
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")
    )
    await call.message.edit_text("üìë –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "download_docs")
async def send_docs_file(call: types.CallbackQuery):
    with open("tech_doc.md", "rb") as file:
        await call.message.answer_document(file, caption="üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.callback_query_handler(lambda call: call.data == "presentation")
async def send_presentation_menu(call: types.CallbackQuery):
    presentation_link = "https://github.com/nimble365/aisid2025_bot/blob/main/aisid2025_presentation.pdf"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", url=presentation_link),
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", callback_data="download_presentation"),
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")
    )
    await call.message.edit_text("üéû –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "download_presentation")
async def send_presentation_file(call: types.CallbackQuery):
    with open("aisid2025_presentation.pdf", "rb") as file:
        await call.message.answer_document(file, caption="üì• –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    await call.message.answer("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.callback_query_handler(lambda call: call.data == "back")
async def go_back(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
